import sqlite3
import datetime
import random
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties

# Replace with your bot token
API_TOKEN = "7694346593:AAHBoasbnvD6A3t349su8yJJLnxDgb2Uobw"

# ---------------------------
# Database Setup (SQLite)
# ---------------------------

# Connect (or create) the SQLite database
conn = sqlite3.connect("phone_time_tracker.db")
cursor = conn.cursor()

# Create the users table (if not exists)
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    daily_goal INTEGER DEFAULT 240
)
""")

# Create the phone_time table (if not exists)
cursor.execute("""
CREATE TABLE IF NOT EXISTS phone_time (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    date TEXT,
    hours REAL,
    timestamp TEXT
)
""")
conn.commit()

# ---------------------------
# Some Motivational Messages
# ---------------------------

MOTIVATIONAL_MESSAGES = [
    "–ú—ã—Å—ã“ì—ã“£ —Å–∞“ì–∞–Ω “õ–∞—Ä–∞–ø –æ—Ç—ã—Ä‚Äî–æ–Ω—ã–º–µ–Ω –æ–π–Ω–∞—É“ì–∞ —É–∞“õ—ã—Ç —Ç–∞–ø! üê±",
    "–≠–∫—Ä–∞–Ω–Ω–∞–Ω –±–∞—Å—ã“£–¥—ã –∫”©—Ç–µ—Ä‚Äî–º—ã—Å—ã“õ—Ç–∞—Ä —Å–µ–Ω—ñ —à—ã–Ω–∞–π—ã ”©–º—ñ—Ä–¥–µ –∫“Ø—Ç–µ–¥—ñ! üò∫",
    "–°–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω“ì–∞ “õ–∞—Ä–∞“ì–∞–Ω–¥–∞, –º—ã—Å—ã“ì—ã“£ —Å–∞“ì–∞–Ω –º–µ–π—ñ—Ä—ñ–º–º–µ–Ω “õ–∞—Ä–∞–ø —Ç“±—Ä! üêæ",
    "–ú—ã—Å—ã“õ —Å–µ–∫—ñ–ª–¥—ñ ”©–º—ñ—Ä —Å“Ø—Ä‚Äî–∞—Ä—Ç—ã“õ —É–∞–π—ã–º—Å—ã–∑, “õ–∞–∑—ñ—Ä–≥—ñ —Å”ô—Ç—Ç–µ–Ω –ª”ô–∑–∑–∞—Ç –∞–ª! üêà",
    "–ù–∞“ì—ã–∑ –∂—ã–ª—É–ª—ã“õ —ç–∫—Ä–∞–Ω–¥–∞ –µ–º–µ—Å, –º—ã—Å—ã“ì—ã“£–Ω—ã“£ “õ“±—à–∞“õ—Ç–∞—É—ã–Ω–¥–∞! ü§ó",
    "–ú—ã—Å—ã“ì—ã“£–Ω—ã“£ –º–∏—è—É–ª–∞—É—ã ‚Äì —Å–µ–Ω—ñ“£ –¥–µ–º–∞–ª—ã—Å—ã“£–¥—ã —Å“±—Ä–∞“ì–∞–Ω—ã! üé∂üêæ",
    "–¢–µ–ª–µ—Ñ–æ–Ω—ã“£–¥—ã “õ–æ–π –¥–∞, –º—ã—Å—ã“ì—ã“£–¥—ã —Å–∏–ø–∞‚Äî–µ–∫–µ—É—ñ“£–µ –¥–µ –ø–∞–π–¥–∞—Å—ã —Ç–∏–µ–¥—ñ! üòª",
    "–ú—ã—Å—ã“õ—Ç–∞—Ä –≤–∏—Ä—Ç—É–∞–ª–¥—ã ”ô–ª–µ–º–¥–µ ”©–º—ñ—Ä —Å“Ø—Ä–º–µ–π–¥—ñ, –æ–ª–∞—Ä —Å–µ–Ω—ñ “õ–∞–∑—ñ—Ä –∫“Ø—Ç–µ–¥—ñ! üè°üêà",
    "–ë—ñ—Ä —Å”ô—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–¥—ã “õ–æ–π—ã–ø, –º—ã—Å—ã“ì—ã“£–Ω—ã“£ –∫”©–∑–¥–µ—Ä—ñ–Ω–µ “õ–∞—Ä–∞‚Äî–æ–ª–∞—Ä–¥—ã“£ —Å“Ø–π—ñ—Å–ø–µ–Ω—à—ñ–ª—ñ–≥—ñ —à—ã–Ω–∞–π—ã! üíï",
    "–ú—ã—Å—ã“õ—Ç–∞–π –µ—Ä–∫—ñ–Ω –±–æ–ª‚Äî“ì–∞–ª–∞–º—Ç–æ—Ä–¥–∞–Ω –µ–º–µ—Å, ”©–º—ñ—Ä–¥–µ–Ω –ª”ô–∑–∑–∞—Ç –∞–ª! üåçüêæ"
]


# ---------------------------
# Finite State Machine (FSM) States
# ---------------------------

class PhoneTimeStates(StatesGroup):
    waiting_for_time = State()   # Waiting for phone usage time input
    waiting_for_goal = State()   # Waiting for daily goal input

# ---------------------------
# Bot and Dispatcher Setup (Aiogram 3.x)
# ---------------------------

bot = Bot(token=API_TOKEN, session=AiohttpSession(), default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ---------------------------
# Handlers
# ---------------------------

# /start and /help command
@dp.message(Command(commands=["start", "help"]))
async def cmd_start(message: types.Message) -> None:
    user_id = message.from_user.id
    username = message.from_user.username or ""
    full_name = message.from_user.full_name or ""

    # Register the user in the database (if not already present)
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
        (user_id, username, full_name)
    )
    conn.commit()

    welcome_text = (
"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω —É–∞“õ—ã—Ç—ã —Ç—Ä–µ–∫–µ—Ä –±–æ—Ç—ã</b>\n\n"
"–¢–µ–ª–µ—Ñ–æ–Ω “õ–æ–ª–¥–∞–Ω—É —É–∞“õ—ã—Ç—ã“£—ã–∑–¥—ã –±–∞“õ—ã–ª–∞“£—ã–∑ –∂”ô–Ω–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∫–µ —Ç”ô—É–µ–ª–¥—ñ–ª—ñ–∫—Ç—ñ –∂–µ“£—ñ“£—ñ–∑!\n\n"
"–ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n"
"/add_time - –ë“Ø–≥—ñ–Ω–≥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω “õ–æ–ª–¥–∞–Ω—É —É–∞“õ—ã—Ç—ã“£—ã–∑–¥—ã “õ–æ—Å—É\n"
"/today - –ë“Ø–≥—ñ–Ω–≥—ñ “õ–æ–ª–¥–∞–Ω—É —É–∞“õ—ã—Ç—ã–Ω –∫”©—Ä—Å–µ—Ç—É\n"
"/week - –ê–ø—Ç–∞–ª—ã“õ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∫”©—Ä—Å–µ—Ç—É\n"
"/set_goal - –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ç–µ–ª–µ—Ñ–æ–Ω “õ–æ–ª–¥–∞–Ω—É –º–∞“õ—Å–∞—Ç—ã–Ω –æ—Ä–Ω–∞—Ç—É\n"
"/motivation - –ú–æ—Ç–∏–≤–∞—Ü–∏—è–ª—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∞–ª—É\n"
"/compare - “ö–æ–ª–¥–∞–Ω—É —É–∞“õ—ã—Ç—ã“£—ã–∑–¥—ã “ì–∞–ª–∞–º–¥—ã“õ –æ—Ä—Ç–∞–º–µ–Ω —Å–∞–ª—ã—Å—Ç—ã—Ä—É\n"
"/stats - –°–æ“£“ì—ã 10 –∫“Ø–Ω–Ω—ñ“£ –µ–≥–∂–µ–π-—Ç–µ–≥–∂–µ–π–ª—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã"
    )
    await message.answer(welcome_text)

# /add_time command: Ask user to input today‚Äôs phone usage time in hours
@dp.message(Command(commands=["add_time"]))
async def add_time_command(message: types.Message, state: FSMContext) -> None:
    await state.set_state(PhoneTimeStates.waiting_for_time)
    await message.answer("–ë“Ø–≥—ñ–Ω–≥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É —É–∞“õ—ã—Ç—ã–Ω —Å–∞“ì–∞—Ç–ø–µ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (0-24):")

# Handler for processing the phone time input
@dp.message(PhoneTimeStates.waiting_for_time)
async def process_phone_time(message: types.Message, state: FSMContext) -> None:
    try:
        hours = float(message.text)
        if not (0 <= hours <= 24):
            raise ValueError("–ñ–∞—Ä–∞–º—Å—ã–∑ –∞—É“õ—ã–º –µ–Ω–≥—ñ–∑—ñ–ª–¥—ñ")
        
        user_id = message.from_user.id
        today = datetime.date.today().isoformat()
        timestamp = datetime.datetime.now().isoformat()

        # Insert the phone time record into the database
        cursor.execute(
            "INSERT INTO phone_time (user_id, date, hours, timestamp) VALUES (?, ?, ?, ?)",
            (user_id, today, hours, timestamp)
        )
        conn.commit()

        # Retrieve user's daily goal in hours
        cursor.execute("SELECT daily_goal FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        daily_goal = result[0] / 60 if result else 4 

        if hours > daily_goal:
            reply_text = f"‚ö†Ô∏è –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ {daily_goal} —Å–∞“ì–∞—Ç –º–∞“õ—Å–∞—Ç—ã“£—ã–∑–¥–∞–Ω –∞—Å—ã–ø –∫–µ—Ç—Ç—ñ“£—ñ–∑. “Æ–∑—ñ–ª—ñ—Å –∂–∞—Å–∞–ø –∫”©—Ä—ñ“£—ñ–∑!"
        else:
            remaining = daily_goal - hours
            reply_text = f"‚úÖ –î–µ—Ä–µ–∫—Ç–µ—Ä —Å–∞“õ—Ç–∞–ª–¥—ã! –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –º–∞“õ—Å–∞—Ç—ã“£—ã–∑“ì–∞ –∂–µ—Ç—É “Ø—à—ñ–Ω ”ô–ª—ñ {daily_goal} —Å–∞“ì–∞—Ç—ã“£—ã–∑ –±–∞—Ä."

        await message.answer(reply_text)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå 0 –º–µ–Ω 24 –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –∂–∞—Ä–∞–º–¥—ã —Å–∞–Ω–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")

# /today command: Show today's total phone usage time in hours
@dp.message(Command(commands=["today"]))
async def today_usage(message: types.Message) -> None:
    user_id = message.from_user.id
    today = datetime.date.today().isoformat()

    cursor.execute(
        "SELECT SUM(hours) FROM phone_time WHERE user_id = ? AND date = ?",
        (user_id, today)
    )
    total_hours = cursor.fetchone()[0] or 0
    await message.answer(f"üìä –ë“Ø–≥—ñ–Ω–≥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É: {total_hours} —Å–∞“ì–∞—Ç.")

# /week command: Show phone usage statistics for the last 7 days in hours
@dp.message(Command(commands=["week"]))
async def week_usage(message: types.Message) -> None:
    user_id = message.from_user.id
    today = datetime.date.today()
    start_date = today - datetime.timedelta(days=6)  # Last 7 days including today

    cursor.execute("""
        SELECT date, SUM(hours)
        FROM phone_time
        WHERE user_id = ? AND date BETWEEN ? AND ?
        GROUP BY date
        ORDER BY date ASC
    """, (user_id, start_date.isoformat(), today.isoformat()))
    rows = cursor.fetchall()

    if rows:
        reply_lines = ["üìÜ <b>–ê–ø—Ç–∞–ª—ã“õ —Ç–µ–ª–µ—Ñ–æ–Ω–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É:</b>"]
        total = 0
        for rec_date, hours in rows:
            reply_lines.append(f"{rec_date}: {hours} —Å–∞“ì–∞—Ç")
            total += hours
        reply_lines.append(f"\n–ë–∞—Ä–ª—ã“ì—ã: {total} —Å–∞“ì–∞—Ç")
        avg = total / 7
        reply_lines.append(f"–ö“Ø–Ω—ñ–Ω–µ –æ—Ä—Ç–∞—à–∞: {avg:.2f} —Å–∞“ì–∞—Ç")
        await message.answer("\n".join(reply_lines))
    else:
        await message.answer("”®—Ç–∫–µ–Ω –∞–ø—Ç–∞“ì–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.")

# /set_goal command: Allow user to set a daily phone usage goal in hours
@dp.message(Command(commands=["set_goal"]))
async def set_goal_command(message: types.Message, state: FSMContext) -> None:
    await state.set_state(PhoneTimeStates.waiting_for_goal)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω–¥—ã –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É –º–∞“õ—Å–∞—Ç—ã–Ω —Å–∞“ì–∞—Ç–ø–µ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (0,5 –ø–µ–Ω 24 –∞—Ä–∞—Å—ã–Ω–¥–∞):")

# Handler for processing the daily goal input
@dp.message(PhoneTimeStates.waiting_for_goal)
async def process_set_goal(message: types.Message, state: FSMContext) -> None:
    try:
        goal = float(message.text)
        if not (0.5 <= goal <= 24):
            raise ValueError("–ú–∞“õ—Å–∞—Ç –∂–∞—Ä–∞–º–¥—ã –∞—É“õ—ã–º–Ω–∞–Ω —Ç—ã—Å")
        
        user_id = message.from_user.id
        cursor.execute(
            "UPDATE users SET daily_goal = ? WHERE user_id = ?",
            (goal * 60, user_id)  # Convert hours to minutes for storage
        )
        conn.commit()
        await message.answer(f"üéØ –¢–µ–ª–µ—Ñ–æ–Ω–¥—ã –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É –º–∞“õ—Å–∞—Ç—ã“£—ã–∑ {goal} —Å–∞“ì–∞—Ç“õ–∞ –±–µ–ª–≥—ñ–ª–µ–Ω–≥–µ–Ω!")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå 0.5 –ø–µ–Ω 24 –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –∂–∞—Ä–∞–º–¥—ã —Å–∞–Ω–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")

# /motivation command: Send a random motivational message
@dp.message(Command(commands=["motivation"]))
async def send_motivation(message: types.Message) -> None:
    msg = random.choice(MOTIVATIONAL_MESSAGES)
    await message.answer(f"üí° {msg}")

# /compare command: Compare user's average usage with global average in hours
@dp.message(Command(commands=["compare"]))
async def compare_usage(message: types.Message) -> None:
    user_id = message.from_user.id
    # Global average phone usage (across all users)
    cursor.execute("SELECT AVG(hours) FROM phone_time")
    global_avg = 3.75

    # User's average phone usage
    cursor.execute("SELECT AVG(hours) FROM phone_time WHERE user_id = ?", (user_id,))
    user_avg = cursor.fetchone()[0] or 0

    if user_avg < global_avg:
        comparison = "–ê–∑–¥–∞—É"
    elif user_avg > global_avg:
        comparison = "–∫”©–±—ñ—Ä–µ–∫"
    else:
        comparison = "—Ç–µ“£"

    reply_text = (
        f"üåç –ñ–∞“ª–∞–Ω–¥—ã“õ –æ—Ä—Ç–∞—à–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É: –∫“Ø–Ω—ñ–Ω–µ {global_avg:.2f} —Å–∞“ì–∞—Ç\n"
        f"üìä –û—Ä—Ç–∞—à–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É: –∫“Ø–Ω—ñ–Ω–µ {user_avg:.2f} —Å–∞“ì–∞—Ç\n"
        f"–°—ñ–∑ ”ô–ª–µ–º–¥—ñ–∫ –æ—Ä—Ç–∞—à–∞ –∫”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ–Ω {comparison}—Å—ã–∑."
    )
    await message.answer(reply_text)

# /stats command: Show detailed statistics (last 10 days) in hours
@dp.message(Command(commands=["stats"]))
async def detailed_stats(message: types.Message) -> None:
    user_id = message.from_user.id
    cursor.execute("""
        SELECT date, SUM(hours) AS total_hours
        FROM phone_time
        WHERE user_id = ?
        GROUP BY date
        ORDER BY date DESC
        LIMIT 10
    """, (user_id,))
    rows = cursor.fetchall()

    if rows:
        reply_lines = ["üìà <b>–°–æ“£“ì—ã 10 –∫“Ø–Ω–¥–µ–≥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—ã“£—ã–∑:</b>"]
        for rec_date, total_hours in rows:
            reply_lines.append(f"{rec_date}: {total_hours} —Å–∞“ì–∞—Ç")
        await message.answer("\n".join(reply_lines))
    else:
        await message.answer("“ö–æ–ª–¥–∞–Ω—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ ”ô–ª—ñ –∂–æ“õ.")

# ---------------------------
# Main entry point
# ---------------------------

async def main():
    print("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
